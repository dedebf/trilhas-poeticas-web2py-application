# -*- coding: utf-8 -*-
#imports
import datetime
from gluon.tools import Crud
import list_tracks as list_t
import edit_track as edit_t
import json

### required - do no delete
def user(): return dict(form=auth())
def download(): return response.download(request,db)
def call(): return service()
### end requires
def index():
    return list_my_tracks(auth.user_id)

def error():
    return dict()

@auth.requires_login()
def tracks_manage():
    form = SQLFORM.smartgrid(db.t_tracks,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def pois_manage():
    form = SQLFORM.smartgrid(db.t_pois,db.t_tags,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def track_ratings_manage():
    form = SQLFORM.smartgrid(db.t_track_ratings,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def tags_manage():
    form = SQLFORM.smartgrid(db.t_tags,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def parental_ratings_manage():
    form = SQLFORM.smartgrid(db.t_parental_ratings,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def track_pois_manage():
    form = SQLFORM.smartgrid(db.t_track_pois,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def track_tags_manage():
    form = SQLFORM.smartgrid(db.t_track_tags,onupdate=auth.archive)
    return locals()

@auth.requires_login()
def nova_trilha():
    form = SQLFORM(db.t_tracks,submit_button=T('Criar'))

    #add tag input
    tag_label = LABEL(XML('<b>Tag Label</b>'),_id='tagFormLabel', _name='tagLabel',_class='control-label col-sm-3')
    my_extra_element = INPUT(_id='tagForm', _name='tag', _class='tagsInputClass', _placeholder='Escreva ao menos uma tag', _style='width:70%,right:0;', **{'_data-role': 'tagsinput'})
    my_extra_element_container = DIV(tag_label,my_extra_element, _id='tagFormContainer', _name='tag',_class='form-group',_style='height:auto;')
    form[0].insert(-1,my_extra_element_container)

    def adding_tag(form):
        tags = form.vars.tag
        if tags:
            #to lowercase
            tags = tags.lower()
            #transform tags in a string array
            tags = tags.split(',')
            for tag in tags:
                #insert only new tags on DB
                returnedID = db.t_tags.update_or_insert(f_name=tag)
                if returnedID == None:
                    tagRow = db(db.t_tags.f_name==tag).select().first()
                    returnedID = tagRow.id
                db.t_track_tags.update_or_insert(f_track=form.vars.id, f_tag=returnedID)

    if form.process().accepted:
        adding_tag(form)
        response.flash = "form accepted"
        redirect(URL('form2',args=(form.vars.id)))
    elif form.errors:
        response.flash = "form errors"
    ###else :
       ### response.flash = "Please fill the form"
    return locals()

@auth.requires_login()
def form2():
    buttons=[]
    buttons.append(TAG.button('Concluir',_name="end", _type="submit", _class="btn-primary"))
    buttons.append(TAG.button('Concluir e Add Prox',_name="next", _type="submit", _class="btn-primary"))
    form = SQLFORM(db.t_pois, buttons=buttons)
    #add map element
    map_label = LABEL(XML('<b>Map Label</b>'),_id='mapFormLabel', _name='mapLabel',_class='control-label col-sm-3')
    my_extra_element = DIV(_id='mapForm', _name='map',_style='height:400px;width:70%,right:0;')
    my_extra_element_container = DIV(map_label,my_extra_element, _id='mapFormContainer', _name='map',_class='form-group',_style='height:400px;')
    form[0].insert(-1,my_extra_element_container)
    if len(request.args) == 1:
        form.vars.f_track = request.args[0]
        form.element('#t_pois_f_track')['_disabled'] = 'disabled'
        my_extra_element = INPUT(_name='f_track',value=form.vars.f_track, _type='text', _hidden=True)
        form[0].insert(0,my_extra_element)

        form.vars.f_placing = 0;
        form.element('#t_pois_f_placing')['_readonly'] = 'readonly'

    if len(request.args) == 2:
        form.vars.f_track = request.args[0]
        form.element('#t_pois_f_track')['_disabled'] = 'disabled'
        my_extra_element = INPUT(_name='f_track',value=form.vars.f_track, _type='text', _hidden=True)
        form[0].insert(-1,my_extra_element)

        form.vars.f_placing = int(request.args[1]) + 1
        form.element('#t_pois_f_placing')['_readonly'] = 'readonly'

        ## Quando submeter o form, testar se o valor recebido através de f_track é igual ao valor que veio via URL, para evitar a url injection
    if form.process().accepted:
        if request.vars.end != None:
            session.flash = "form accepted"
            redirect(URL('default','index'))
        elif request.vars.next != None:
            response.flash = "form accepted"
            redirect(URL('form2',args=(form.vars.f_track,form.vars.f_placing)))
        #response.flash = "form accepted"
        #redirect(URL('form2',args=(form.vars.f_track,form.vars.f_placing)))
        session.flash = "Algum erro aconteceu!"
        redirect(URL('default','index'))
    elif form.errors:
        response.flash = "form errors"
    else :
        response.flash = "Please fill the form"
        ##session.flash = "Para criar um ponto, primeiro você deve criar uma trilha."
        ##redirect(URL('form1'))
    return dict(form=form)

@auth.requires_login()
def form3():
    from gluon.tools import geocode
    latitude = longtitude = ''
    form=SQLFORM.factory(Field('search'), _class='form-search')
    form.custom.widget.search['_class'] = 'input-long search-query'
    form.custom.submit['_value'] = 'Search'
    form.custom.submit['_class'] = 'btn'
    if form.accepts(request):
        address=form.vars.search
        (latitude, longitude) = geocode(address)
    else:
        (latitude, longitude) = geocode('UNB')
    return dict(form=form, latitude=latitude, longitude=longitude)

##fazendo testes
@auth.requires_login()
def track_list():
    grid = SQLFORM.smartgrid(db.t_tracks,linked_tables=['child'])
    #grid = SQLFORM.grid(db.auth_user,
    #editable = auth.has_membership('managers'),
    #deletable = auth.has_membership('managers'))
    return locals()

@auth.requires_login()
def list_tracks():
    return dict(grid=list_t.list_tracks())

@auth.requires_login()
def list_my_tracks(user_id):
    return dict(grid=list_t.list_my_tracks(user_id))

@auth.requires_login()
def show_track():
    track_id = request.args(0) or redirect(URL('list_tracks'))
    crud = Crud(db)
    #getting list of tags
    tags = ""
    for row in db(db.t_track_tags.f_track==track_id).select():
        tags += db(db.t_tags.id==row.f_tag).select(db.t_tags.f_name)[0].f_name +"; "
    #adding button for edit
    buttons=[]
    #b_editar_trilha = INPUT(_value="Editar Trilha", _type="button", _class="btn-primary", _onclick="javascript:window.location.href = '/default/edit_track/'"+track_id)
#    b_editar_trilha = TAG.button('Editar Trilha',_name="edit", _type="submit", _class="btn-primary")
    b_editar_trilha = A("Editar Trilha", _class='btn-primary', _href=URL("edit_track", args=track_id))
    b_add_poi = A("Adicionar Ponto", _class='btn-primary', _href=URL("form2", args=[track_id,getLastPlacing(track_id)]))
    #create a static path of pois
    #path = '[[-12.044012922866312, -77.02470665341184], [-12.05449279282314, -77.03024273281858], [-12.055122327623378, -77.03039293652341], [-12.075917129727586, -77.02764635449216], [-12.07635776902266, -77.02792530422971], [-12.076819390363665, -77.02893381481931], [-12.088527520066453, -77.0241058385925], [-12.090814532191756, -77.02271108990476]]'

    return dict(show=crud.read(db.t_tracks,track_id),tags=tags, grid=list_points(track_id), path=makePathPois(track_id,False), b_editar_trilha=b_editar_trilha, b_add_poi=b_add_poi,  lista = db((db.t_pois.is_active==True) & (db.t_pois.f_track==track_id)).select())

@auth.requires_login()
def list_points(track_id):
    tracks = db.t_pois
    crud = Crud(db)

    grid = webgrid.WebGrid(crud)
    #grid.datasource = db(db.t_tracks.is_active==True)
    grid.datasource = db((db.t_pois.is_active==True) & (db.t_pois.f_track==track_id))

    grid.pagesize = 10

    grid.enabled_rows = ['header', 'pager', 'footer']

    grid.fields = ['t_pois.f_name', 't_pois.f_placing']

    grid.field_headers = ['Nome','Ordem']

    #grid.action_links = ['view','edit','delete']
    #grid.action_headers = ['view','edit','delete']
    grid.action_links = ['edit','delete']
    grid.action_headers = ['edit','delete']
	#grid.css_prefix = ['table']
#    grid.filters = ['t_pois.f_placing']

    grid.allowed_vars = ['pagesize','pagenum','sortby','ascending','groupby']

    grid.filter_query = lambda f,v: f==v

    #grid.view_link = lambda row: A(IMG(_src='http://4.bp.blogspot.com/-BhR-9_MSDIk/VDPZPagk5RI/AAAAAAAAD8I/YvEOEyzVymA/s1600/Search%2BIcon.png',_alt='test', _width='12px', _height='12px'), _href=URL('show_point', args=row.id))
#     grid.edit_link = lambda row: A('Edit', _href=URL('edition', args=row.id))
#     Try to use SQLFORM and track_id for go to track page after edit
    grid.edit_link = lambda row: A('Edit', _href=URL('edit_poi', args=(request.args(0),row.id)))
    grid.delete_link = lambda row: A('Delete', _onclick="return confirm('Tem certeza bro?')", _href=URL('remove_point', args=[row.id,track_id]))

    return grid()

# see edit_poi
@auth.requires_login()
def edition():
    crud = Crud(db)
    form=crud.update(db.t_pois, request.args(0))
    #add map element
    map_label = LABEL(XML('<b>Map Label</b>'),_id='mapFormLabel', _name='mapLabel',_class='control-label col-sm-3')
    map_td_label = TD(map_label, _class='w2p_fl')
    my_extra_element = DIV(_id='mapForm', _name='map',_style='height:400px;width:70%,right:0;')
    my_extra_element_container = TR(map_td_label,my_extra_element, _id='mapFormContainer', _name='map',_class='form-group',_style='height:400px;')
    form.element(_id="t_pois_f_placing")['_readonly'] = 'True'
    form.element('tr', _id='delete_record__row',replace=None)
    form[0].insert(-1,my_extra_element_container)
    return dict(form=form)

import edit_poi as edit_p
@auth.requires_login()
def edit_poi():
#     fake track_id for test
    track_id = request.args(0) or redirect(URL('index'))
    poi_id = request.args(1) or redirect(URL('show_track', args=track_id))
    form = edit_p.edit_poi_ctrl(track_id, poi_id)

    #add map element
    map_label = LABEL(XML('<b>Map Label</b>'),_id='mapFormLabel', _name='mapLabel',_class='control-label col-sm-3')
    my_extra_element = DIV(_id='mapForm', _name='map',_style='height:400px;width:70%,right:0;')
    my_extra_element_container = DIV(map_label,my_extra_element, _id='mapFormContainer', _name='map',_class='form-group',_style='height:400px;')
    form[0].insert(-1,my_extra_element_container)

    return dict(form=form)

@auth.requires_login()
def makePathPois(track_id,justTitles):
        #create path of pois from rows of points
#        rows = db(db.t_pois.f_track==track_id).select()
        rows = db((db.t_pois.is_active==True) & (db.t_pois.f_track==track_id)).select()
        path = '['
#         pathTitles = "["
        for row in rows:
            path = path + '[' + row.f_latitude + ','
            path = path + row.f_longitude + '], '
#             pathTitles = pathTitles + "[" + row.f_name + "], "
        path = path + ']'
#         pathTitles = pathTitles + "]"
#         if(justTitles):
#             return pathTitles
        return path

@auth.requires_login()
def getLastPlacing(track_id):
        rows = db((db.t_pois.is_active==True) & (db.t_pois.f_track==track_id)).select()
        placing = len(rows)-1
        return placing

def links_right(tablerow,rowtype,rowdata):
    if rowtype != 'pager':
        links = tablerow.components[:3]
        del tablerow.components[:3]
        tablerow.components.extend(links)

@auth.requires_login()
def edit_track() :
    track_id = request.args(0) or redirect(URL('form1'))
    form = edit_t.edit_track_ctrl(track_id)

    return locals()

@auth.requires_login()
def remove_track() :
    track_id = request.args(0) or redirect(URL('list_tracks'))
    track = db(db.t_tracks.id == track_id).select().first();

    #track.update_record(is_active==False)
    track.is_active = False
    if (track.update_record()):
        session.flash="Track removed!";
    else:
        session.flash="Track not removed!";
    redirect(URL('list_tracks'))
    ##return track;

@auth.requires_login()
def remove_point() :
    track_id = request.args(1) or redirect(URL('list_tracks'))
    poi_id = request.args(0) or redirect(URL('show_track', args=track_id))

    poi = db(db.t_pois.id == poi_id).select().first();

    poi.is_active = False
    if (poi.update_record()):
        session.flash="POI removed!";
    else:
        session.flash="POI not removed!";
    redirect(URL('show_track', args=track_id))
    ##return track;

import manage_users as m_users
@auth.requires_login()
@auth.requires(auth.has_membership('manager') or auth.has_membership('admin'))
def manage_users() :
    btn = lambda row: A("Edit", _href=URL('manage_user', args=row.auth_user.id))
    db.auth_user.edit = Field.Virtual(btn)
    rows = db(db.auth_user).select()
    headers = ["ID", "Name", "Last Name", "Email", "Edit"]
    fields = ['id', 'first_name', 'last_name', "email", "edit"]
    table = TABLE(THEAD(TR(*[B(header) for header in headers])),
                  TBODY(*[TR(*[TD(row[field]) for field in fields]) \
                        for row in rows]))
    table["_class"] = "table table-striped table-bordered table-condensed"
    return dict(grid=table)
#    return dict(grid=m_users.list_users())

@auth.requires_login()
@auth.requires(auth.has_membership('manager') or auth.has_membership('admin'))
def manage_user():
    user_id = request.args(0) or redirect(URL('list_users'))
    form = SQLFORM(db.auth_user, user_id).process()
    membership_panel = LOAD(request.controller,
                            'manage_membership.html',
                             args=[user_id],
                             ajax=True)
    return dict(form=form,membership_panel=membership_panel)

@auth.requires_login()
@auth.requires(auth.has_membership('manager') or auth.has_membership('admin'))
def manage_membership():
    user_id = request.args(0) or redirect(URL('list_users'))
    db.auth_membership.user_id.default = int(user_id)
    db.auth_membership.user_id.writable = False
    form = SQLFORM.grid(db.auth_membership.user_id == user_id,
                       args=[user_id],
                       searchable=False,
                       deletable=False,
                       details=False,
                       selectable=False,
                       csv=False,
                       user_signature=False)
    return form


def get_tracks():
   ## rows = db().select(db.t_tracks.ALL, db.t_pois.ALL, db.auth_user.ALL,
   ##     orderby=db.t_tracks.id,
   ##     left=db.t_pois.on(db.t_tracks.id==db.t_pois.f_track).db.t_tracks.on(db.t_tracks.f_owner==db.auth_user.id)
   ## )
    rows = db(db.t_tracks.is_active==True).select(
        db.auth_user.id, db.auth_user.first_name, db.auth_user.last_name, db.t_tracks.ALL,
        orderby=db.t_tracks.id,
        join=db.auth_user.on(db.t_tracks.f_owner==db.auth_user.id),
        cache=(cache.ram, 43200),
        cacheable=True
    )
##    return json.dumps([[r.id, r.f_name, r.f_parental_rating, r.f_description, r.f_owner, r.f_create_date] for r in rows])
    return rows.as_json();

def get_tracks_by_autor():
	track_id = request.args(0) or return False;
    return rowsTags.as_json();

def get_tracks_by_tag():
	track_id = request.args(0) or return null;
    return rowsTags.as_json();

def get_tracks_by_parental_ratings():
	track_id = request.args(0) or return null;
    return rowsTags.as_json();

##return tags by track
def get_tags_by_track():
	track_id = request.args(0) or return null;
    return rowsTags.as_json();

def get_points():
   ## rows = db().select(db.t_tracks.ALL, db.t_pois.ALL, db.auth_user.ALL,
   ##     orderby=db.t_tracks.id,
   ##     left=db.t_pois.on(db.t_tracks.id==db.t_pois.f_track).db.t_tracks.on(db.t_tracks.f_owner==db.auth_user.id)
   ## )
	##verificar se veio argumento
    track_id = request.args(0) or return null;
    rows = db(db.t_pois.f_track==track_id).select(
        db.t_pois.ALL,
        orderby=db.t_pois.f_placing,
        cache=(cache.ram, 43200),
        cacheable=True
        #join=db.t_tracks.on(db.t_tracks.f_owner==db.auth_user.id)
    )
##    return json.dumps([[r.id, r.f_name, r.f_parental_rating, r.f_description, r.f_owner, r.f_create_date] for r in rows])
    return rows.as_json();

def get_poi():
    poi_id = request.args(0)
    poi = db(db.t_pois.id==poi_id).select(
        db.t_pois.ALL
    )
    return poi.as_json();
